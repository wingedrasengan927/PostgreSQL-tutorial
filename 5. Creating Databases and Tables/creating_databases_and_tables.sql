/*
Data Types:
Link: https://www.postgresqltutorial.com/postgresql-data-types/

Primary Key and Foreign Key:
1. A Primary key is a column or a group of columns used 
to identify a row uniquely in a table
2. A foreign key is a field or group of fields in a table 
that uniquely identifies a row in another table
3. A foreign key is defined in a table that references to the
primary key of the other table
4. The table that contains the foreign key is called referencing
table or child table.
5. The table to which the foreign key references is called referenced
table or parent table
6. A table can have multiple foreign keys depending on its relationship
with other tables

Constraints:
1. Constraints are the rules enforced on data columns on table
2. These are used to prevent invalid data from being entered into the
databse
3. This ensures the accuracy and reliability of the data in the database
4. examples: 
NOT NULL Constraint - ensures that there are no null values in the column,
UNIQUE Constraint - ensures that the rows in the column are unique
CHECK Constraint - Ensures that all values in a column satisfy certain conditions

SERIAL:
1. In PostgreSQL, a sequence is a special kind of a databse object the generates 
a sequence of integers.
2. A sequence is often used as the primary key column in a table
3. It will create a sequence object and set the next value generated by the sequence
as the default value for the column
4. This is perfect for a primary key, because it logs unique integer entries 
for you automatically upon insertion.
5. If a row is later removed, the column with the SERIAL data type will not adjust,
marking the fact that a row was removed from the sequence.

CREATE TABLE:
CREATE TABLE table_name (
	column_name TYPE column_constraint,
	column_name TYPE column_constraint,
	table_constraint table_constraint
) INHERITS existing_table_name;

INSERT:
INSERT allows you to add in rows to a table.
INSERT INTO table (column1, column2, ...)
	VALUES
	(value1, value2, ...),
	(value1, value2, ...), ..;
	
INSERT INTO table (column1, column2, ...)
SELECT column1, column2, ...
FROM another_table
WHERE condition; 

UPDATE:
The UPDATE keyword allows for changing of values of the columns
in a table.
UPDATE table
SET column1 = value1,
	column2 = value2,
	...
WHERE 
condition;

UPDATE JOIN:
UPDATE tableA
SET original_col = tableB.new_col
FROM tableB
WHERE tableA.id = tableB.id;

DELETE:
1. We can use DELETE Clause to remove rows from a table.
DELETE FROM table
WHERE row_id = 1;
2. We can delete rows based on their presence in other tables.
DELETE FROM tableA
USING tableB
WHERE tableA.id = tableB.id;
3. Delete Entire Table
DELETE FROM table;

ALTER:
1. The ALTER clause allows for changes to an existing table structure
such as:
1. Adding, dropping, or renaming columns
2. Changing a column's data type
3. Set DEFAULT values for a column
4. Add CHECK constraints
5. Rename table.
Syntax:
ALTER TABLE table_name action

CHECK:
1. The CHECK constraint allows us to create more customized constraints
that adhere to a certain condition
2. Such as making sure all inserted integer values fall below
a certain threshold
Syntax:
CREATE TABLE example (
ex_id SERIAL PRIMARY KEY,
age SMALLINT CHECK (age > 21),
parent_age SMALLINT CHECK (parent_age > age)
);
*/




